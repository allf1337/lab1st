Задание 1. Изучите пример обработки структурных типов данных. Подготовьте приложение, убедитесь в его работоспособности.

Задание 2. В соответствии с вариантом разработайте программу для обработки структурных типов данных. Реализуйте отдельные функции для ввода, вывода, поиска информации по некоторому условию, сортировки по некоторому признаку.

  
  Автобусный ПАРК: гос.номер АВТОБУСА, модель, год выпуска, количество мест для сидения, количество мест для стояния. Упорядочьте по убыванию года выпуска. Выведите список автобусов требуемой вместительности.
    
    
    
    /***************************************************************
 *                                                             *
 * Файл     : students.cpp                                     *
 *                                                             *
 * Описание : пример программы для обработки структурных типов *
 *            данных STUDENT (Студент) и GROUP (Группа)        *
 *                                                             *
 ***************************************************************/

#include <iostream.h>>
#include <windows.h>

// ================ описание типов данных ======================

// ------- описание структурного типа данных СТУДЕНТ -----------
struct STUDENT {
  char LastName[15];     // Фамилия
  char FirstName[15];    // Имя
  char MiddleName[15];   // Отчество
  int Number;            // Номер студенческого билета
};

// ------- описание структурного типа данных ГРУППА ------------
// максимальное количество студентов в группе
#define MAX_STUDENT 30
struct GROUP {
  char Name[5];          // Название группы
  int N;                 // Количество студентов
  STUDENT Student[MAX_STUDENT];  // Массив студентов
};

// =============== описание прототипов функций =================

// Ввод информации о студенте с клавиатуры
STUDENT InputStudent(void);

// Вывод информации о студенте на экран
void OutputStudent(STUDENT Student);

// Ввод информации о группе с клавиатуры
void InputGroup(GROUP *Group);

// Вывод информации о группе на экран
void OutputGroup(GROUP Group);

// =============== основная функция программы ==================

int main(int argc, char* argv[])
  {
  SetConsoleCP(1251);
  SetConsoleOutputCP(1251);

  GROUP Group;
  InputGroup(&Group);
  OutputGroup(Group);

  Sleep(7654);
  return 0;
  }

// ============ Ввод информации о студенте с клавиатуры ========
STUDENT InputStudent(void)
  {
  STUDENT student;
  cout << "Введите фамилию ====> ";
  cin >> student.LastName;
  cout << "Введите имя ========> ";
  cin >> student.FirstName;
  cout << "Введите отчество ===> ";
  cin >> student.MiddleName;
  cout << "Введите номер студенческого билета ===> ";
  cin >> student.Number;
  return student;
  }

// ============ Вывод информации о студенте на экран ===========
void OutputStudent(STUDENT Student)
  {
  cout.width(8);
  cout.fill('0');
  cout << Student.Number << " "
       << Student.LastName << " "
       << Student.FirstName[0] << ". "
       << Student.MiddleName[0] << ".\n";
  }

// ============ Ввод информации о группе с клавиатуры ==========
void InputGroup(GROUP *Group)
  {
  cout << "Введите название группы ===> ";
  cin >> Group->Name;
  cout << "Введите количество студентов (не более "
       << MAX_STUDENT << ") ===> ";
  cin >> Group->N;
  for (int i=0;i<Group->N;i++)
    {
    cout << "Введите информацию о " << (i+1) << "-ом студенте\n";
    Group->Student[i]=InputStudent();
    }
  }

// ============ Вывод информации о группе на экран =============
void OutputGroup(GROUP Group)
  {
  cout << "Список группы " << Group.Name << "\n";
  for(int i=0;i<Group.N;i++) OutputStudent(Group.Student[i]);
  }

// ===================== конец программы =======================
